#include "orderedArrayListTypeImp.cpp"
#include "arrayListTypeImp.cpp"
TEST(insertAt, 1) {
    orderedArrayListType list(5);
    list.insertAt(3, 2);
    list.print();
     ASSERT_FALSE(list.isItemAtEqual(3, 2)) << "Expected the list to be sorted";
    ASSERT_TRUE(list.isItemAtEqual(0, 2)) << "Expected the item at position `0` to be 2";
}TEST(insertAt, 2) {
    orderedArrayListType list(5);
    list.insertAt(1, 0);
    ASSERT_FALSE(list.isItemAtEqual(1, 0)) << "Expected the list to be sorted";
    ASSERT_TRUE(list.isItemAtEqual(0, 0)) << "Expected the item at position `0` to be 0";
}
TEST(insert, 1) {
    orderedArrayListType list(1);
    list.insert(3);
    list.insert(2);
    ASSERT_EQ(list.listSize(), 1);
    ASSERT_TRUE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(0, 3)) << "Expected the item at position `0` to be 3";
} 
TEST(insert, 2) {
    orderedArrayListType list(5);
    list.insert(3);
    list.insert(2);
    ASSERT_EQ(list.listSize(), 2);
    ASSERT_FALSE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(1, 3)) << "Expected the list to be sorted";
}
TEST(insertEnd, 1) {
    orderedArrayListType list(5);
    for(int i = 0; i < 4; i++) {
        list.insertAt(i, i);
    }
    list.insertEnd(100);
    ASSERT_EQ(list.listSize(), 5);
    ASSERT_TRUE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(4, 100)) << "Expected the last item in the list to be 100";
}TEST(insertEnd, 2) {
    orderedArrayListType list(5);
    for(int i = 0; i < 4; i++) {
        list.insertAt(i, i);
    }
    list.insertEnd(24);
    ASSERT_EQ(list.listSize(), 5);
    ASSERT_TRUE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(4, 24)) << "Expected the last item in the list to be 100";
}
TEST(replaceAt, 1) {
    orderedArrayListType list(5);
    for(int i = 0; i < 5; i++) {
        list.insertAt(i, i);
    }
    list.replaceAt(0, 43);
    ASSERT_EQ(list.listSize(), 5);
    ASSERT_TRUE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(4, 43)) << "Expected the item at position `4` to be 43";
}TEST(replaceAt, 2) {
    orderedArrayListType list(5);
    for(int i = 0; i < 5; i++) {
        list.insertAt(i, i);
    }
    list.replaceAt(0, 98);
    ASSERT_EQ(list.listSize(), 5);
    ASSERT_TRUE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(4, 98)) << "Expected the item at position `4` to be 98";
}
TEST(replaceAt, 3) {
    orderedArrayListType list(5);
    for(int i = 0; i < 5; i++) {
        list.insertAt(i, i);
    }
    list.replaceAt(5, 98); // out of bounds 
    ASSERT_EQ(list.listSize(), 5);
    ASSERT_TRUE(list.isFull());
    ASSERT_TRUE(list.isItemAtEqual(0, 0)) << "Expected the item at position `0` to be 0";
    ASSERT_TRUE(list.isItemAtEqual(1, 1)) << "Expected the item at position `1` to be 1";;
    ASSERT_TRUE(list.isItemAtEqual(2, 2)) << "Expected the item at position `2` to be 2";;
    ASSERT_TRUE(list.isItemAtEqual(3, 3)) << "Expected the item at position `3` to be 3";;
    ASSERT_TRUE(list.isItemAtEqual(4, 4)) << "Expected the item at position `4` to be 4";;
}
TEST(seqSearch, 1) {
    orderedArrayListType list(5);
    for(int i = 0; i < 4; i++) {
        list.insertAt(i, i);
    }
    ASSERT_EQ(list.seqSearch(2), 2);
    ASSERT_EQ(list.seqSearch(3), 3);
    ASSERT_EQ(list.seqSearch(23), -1);
}TEST(seqSearch, 2) {
    orderedArrayListType list(5);
    for(int i = 0; i < 4; i++) {
        list.insertAt(i, i * 10);
    }
    ASSERT_EQ(list.seqSearch(20), 2);
    ASSERT_EQ(list.seqSearch(30), 3);
    ASSERT_EQ(list.seqSearch(87), -1);
}
